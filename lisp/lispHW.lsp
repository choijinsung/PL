(defun last-item (x)
	(cond ((atom x) (first x))
		(t (nth (- (length x) 1) x))
	)
)

(defun remove-1st (atm lst)
   (cond ( (null lst) nil )
	 ( (not (equal atm (car lst))) (cons (car lst) (remove-1st atm (cdr lst))) )
         ( t (cdr lst) )
   )
)

(defun remove-last (atm lst)
   (reverse (remove-1st atm (reverse lst))))

(defun my-append (x y)
	(cond ( (null x) y)
	      ( (null (cdr x)) (cons (car x) y) )
	      ( t  (cons (car x) (my-append (cdr x) y)) )
	)
)

(defun my-merge (x y)
	(cond ( (null x) y )
	      ( (null y) x )
	      ( (<= (car x) (car y)) (cons (car x) (my-merge (cdr x) y)) )
	      ( t (cons (car y) (my-merge x (cdr y))))
	)
)

(defun subst-all (x y z)
	(cond ( (equal y z) x )
              ( (atom z) z )
              ( t (cons (subst-all x y (car z)) (subst-all x y (cdr z))) )
   )
)

(defun count-all (x)
   (cond ( (null x) 0 )
         ( (atom (car x)) (1+ (count-all (cdr x))) )
         ( t (+ (count-all (car x)) (count-all (cdr x))) ))
)

(defun remove-all (atm lst)
   (cond ( (null lst) nil )
	 ( (equal atm (car lst)) (remove-all atm (cdr lst)) )
	 ( (not (atom (car lst))) (cons (remove-all atm (car lst)) (remove-all atm (cdr lst))) )
	 ( (not (equal atm (car lst))) (cons (car lst) (remove-all atm (cdr lst))) )
         ( t (remove-all atm (cdr lst)) )
   )
)

(defun reverse-all (x)
	(cond ( (atom x) x )
	      ( (not (atom x)) (append (reverse-all (cdr x)) (list (reverse-all (car x)))) )
	      ( (null (cdr x)) x )
	      ( t (append (reverse-all (cdr x)) (list (reverse-all (car x)))) )
	)
)

(defun depth (x)
   (cond ( (atom x) 0 )
         ( t (max (1+ (depth (car x))) (depth (cdr x))) )
   )
)

(defun flatten (x)
   (cond ( (null x) x )
	 ( (atom (car x)) (cons (car x) (flatten (cdr x))) )
	 ( t (append (flatten (car x)) (flatten (cdr x))) )
   )
)

(defun memberp (atm lst)
   (cond  ( (null lst) nil )
          ( (equal atm (car lst)) t )
   	  ( t (memberp atm (cdr lst)) )
   )
)

(defun my-union (x y)
	(cond ( (null x) y)
	      ( (null y) x)
	      ( (memberp (car x) y) (my-union (cdr x) y) )
	      ( t (cons (car x) (my-union (cdr x) y)) )
	)
)

(defun set-diff (x y)
	(cond ( (null x) nil )
	      ( (null y) x )
	      ( (equal (car x)(car y)) 
			(cond ((null (cddr x)) (set-diff (cdr x)(cdr y)) )
			      (t (append (set-diff (cdr x)(cdr y)) (set-diff (cddr x) y)) )
			) )
	      ( (not (null (cdr y))) 
			(cond ((null (cddr x)) (set-diff x (cdr y)) )
			      ( t (append (set-diff x (cdr y))(set-diff (cdr x) y)) )
			) )
	      ( t (list(car x)) )
	)
)

(defun my-subsetp (x y)
	(cond ( (null x) t )
	      ( (memberp (car x) y) (my-subsetp (cdr x) y) )
	      (t nil) 
	)
)

(defun comp (x y)
	(cond ( (null x) nil )
	      ( (null y) x )
	      ( (equal (car x)(car y)) 
			(cond ((null (cddr x)) (comp (cdr x)(cdr y)) )
			      (t (append (comp (cdr x)(cdr y)) (comp (cddr x) y)) )
			) )
	      ( (not (null (cdr y))) 
			(cond ((null (cddr x)) (comp x (cdr y)) )
			      ( t (append (comp x (cdr y))(comp (cdr x) y)) )
			) )
	      ( t (list(car x)) )
	)
)

(defun infer (x y)
	(cond ((null (memberp (car y) x)) nil)
	      ( (equal (car x)(car y)) (append (cadr y)(cdr x)) )
		( t (cons (car x)(infer (cdr x) y)) )
	)
)

(defun distance (x y)
	(cond ( (null x) 0 )
	      ( (> (car x)(car y))(+(-(car x)(car y))(distance (cdr x)(cdr y))) )
	      ( (< (car x)(car y))(+(-(car y)(car x))(distance (cdr x)(cdr y))) )
	      ( t (distance (cdr x)(cdr y)) )
	)
)